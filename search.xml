<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新文章编写指南</title>
      <link href="/2024/11/18/%E6%96%B0%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
      <url>/2024/11/18/%E6%96%B0%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="兴建Hexo的Markdown博客文章"><a href="#兴建Hexo的Markdown博客文章" class="headerlink" title="兴建Hexo的Markdown博客文章"></a>兴建Hexo的Markdown博客文章</h1><p>在根文件夹打开 git bash 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;文章名称&quot;</span></span><br></pre></td></tr></table></figure><p>注意必须要输入引号，否则会报错。在<code>\source\_posts</code>目录下会生成一个.md文件,文章可在该文件内编写。</p><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>具体完整的内容可以查看<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a> 本文章主要记录一些常用的Markdown语法。</p><h2 id="文案标题"><a href="#文案标题" class="headerlink" title="文案标题"></a>文案标题</h2><p>Markdown 标题有两种格式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">一级标题</span></span><br><span class="line"><span class="section">=================</span></span><br><span class="line"></span><br><span class="line"><span class="section">二级标题</span></span><br><span class="line"><span class="section">-----------------</span></span><br></pre></td></tr></table></figure><p>该方法 <code>=</code> 和 <code>-</code> 的个数可以随意，但是不常用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p>该方法较为常用，但是要注意<code>#</code>的后面一定要加上空格<code> </code>否则语法不起作用。</p><h2 id="嵌入代码"><a href="#嵌入代码" class="headerlink" title="嵌入代码"></a>嵌入代码</h2><p>在文字段中加入编码可以使用两个符号“ &#96; ”来包裹，该符号位于键盘的 <kbd>esc</kbd> 键下面。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf(&quot;Hello World!&quot;)`</span></span><br></pre></td></tr></table></figure><p>Markdown效果：<code>printf(&quot;Hello World!&quot;)</code><br>当代码量相对较大时，可以使用两个<code>```</code>来包裹。第一个<code>```</code>后面可以加入语言名，如<code>C</code>，这样Markdown就会根据语言名高亮显示。编码如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\ <span class="code">```C</span></span><br><span class="line"><span class="code"> #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"> int main(int argc, char *argv[], char *envp[])</span></span><br><span class="line"><span class="code"> &#123;</span></span><br><span class="line"><span class="code">     printf(&quot;Hello World!\n&quot;);</span></span><br><span class="line"><span class="code">     return 0;</span></span><br><span class="line"><span class="code"> &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"> \```</span></span><br></pre></td></tr></table></figure><p>Markdown效果,可见语法已经被高亮显示了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><p>Markdown可以将链接嵌入文字中<code>[链接名称](链接地址)</code>，此时只显示链接中的链接名称，点击链接可以跳转到链接地址，举例如下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Fred&#x27;s Blog</span>](<span class="link">https://jasting10.github.io/</span>)</span><br></pre></td></tr></table></figure><p>效果如下:<a href="https://jasting10.github.io/">Fred’s Blog</a></p><p>当然也可以直接显示出需要跳转的链接，可以使用 <code>&lt;链接地址&gt;</code> 举例如下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://jasting10.github.io/&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下:<a href="https://jasting10.github.io/">https://jasting10.github.io/</a></p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>图片语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure><p>可见该语法和嵌入链接的语法相似，举例如下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">hummingbird.jpeg</span>](<span class="link">https://s2.loli.net/2024/11/14/s6jWuxrelG8Y52Z.jpg</span>)</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://s2.loli.net/2024/11/14/s6jWuxrelG8Y52Z.jpg" width="50%"><br>Markdown还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code>标签。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s2.loli.net/2024/11/14/s6jWuxrelG8Y52Z.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下,图像缩小长宽均50%:<br><img src="https://s2.loli.net/2024/11/14/s6jWuxrelG8Y52Z.jpg" width="25%"></p><h2 id="文字编辑"><a href="#文字编辑" class="headerlink" title="文字编辑"></a>文字编辑</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>Markdown 可以使用以下几种字体：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure><p>效果如下：<br><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>带下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：<u>带下划线文本</u></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p>效果如下：<del>BAIDU.COM</del></p><p><strong><strong>后续如用到新语法会继续更新文章</strong></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP32学习笔记</title>
      <link href="/2024/11/14/ESP32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/14/ESP32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ESP32开发相关链接"><a href="#ESP32开发相关链接" class="headerlink" title="ESP32开发相关链接"></a>ESP32开发相关链接</h1><p>开发ESP32可以采用IDF和Arduino IDE进行开发。为了进一步学习LVGL图形库和FreeRTOS，我选择使用乐鑫IDF进行开发。IDT开发官方文档可见<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v4.3/esp32/get-started/index.html#id2">快速入门</a></p><h1 id="一些idf常用命令"><a href="#一些idf常用命令" class="headerlink" title="一些idf常用命令"></a>一些idf常用命令</h1><p>idf工具主要调用<code>idf.py</code>这个python脚本，通过传递不同的参数实现不同功能，如交叉编译等。为了终端可以调用该指令需要将其添加路径到系统环境变量中,Linux系统下在目录下运行shell脚本<code>$ ./source export.sh</code>即可自动添加系统环境变量。</p><h2 id="创建一个空工程"><a href="#创建一个空工程" class="headerlink" title="创建一个空工程"></a>创建一个空工程</h2><p>其中my_project为自定义工程名，该命令会创建一个空工程，并生成工程文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py create-project my_project</span><br></pre></td></tr></table></figure><h2 id="设置芯片类型"><a href="#设置芯片类型" class="headerlink" title="设置芯片类型"></a>设置芯片类型</h2><ul><li>ESP32系列模组：idf.py set-target esp32</li><li>ESP32-S2系列模组：idf.py set-target esp32s2</li><li>ESP32-C3系列模组：idf.py set-target esp32c3</li><li>ESP32-S3系列模组：idf.py set-target esp32s3</li></ul><p>这里我们以ESP32-S3系列模组为例，在终端内运行命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py set-target ESP32s3</span><br></pre></td></tr></table></figure><p>idf自动切换为S3型号。</p><h2 id="构建-清除工程"><a href="#构建-清除工程" class="headerlink" title="构建&amp;清除工程"></a>构建&amp;清除工程</h2><p>构建指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py build</span><br></pre></td></tr></table></figure><p>由于芯片具有一定复杂度，编译中产生大量中间文件，编译后工程内存占用高达百兆不利于传递存储。清除编译中间文件指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py clean</span><br></pre></td></tr></table></figure><h2 id="下载-调试工程"><a href="#下载-调试工程" class="headerlink" title="下载&amp;调试工程"></a>下载&amp;调试工程</h2><p>下载指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py flash</span><br></pre></td></tr></table></figure><p>可以使用下面指令监视串口输出，PORT为串口设备，如&#x2F;dev&#x2F;ttyUSB0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py -p PORT monitor</span><br></pre></td></tr></table></figure><p>也可以直接调试工程，使用下面指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ idf.py monitor</span><br></pre></td></tr></table></figure><p><span style="color: red;">特别注意Linux终端退出需要按<kbd>Ctrl</kbd>+<kbd>[</kbd>, 其他什么都不好使。</span></p><h1 id="FreeRTOS基础"><a href="#FreeRTOS基础" class="headerlink" title="FreeRTOS基础"></a>FreeRTOS基础</h1><h1 id="ESP32开发小坑"><a href="#ESP32开发小坑" class="headerlink" title="ESP32开发小坑"></a>ESP32开发小坑</h1><h2 id="自带rtos延时函数不准问题"><a href="#自带rtos延时函数不准问题" class="headerlink" title="自带rtos延时函数不准问题"></a>自带rtos延时函数不准问题</h2><p> vTaskDelay();函数使用时，要想做到延时确定的时间，需要注意使用portTICK_PERIOD_MS宏进行tick时间转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vTaskDelay(<span class="number">1000</span>/portTICK_PERIOD_MS);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
